name: Build and Deploy to Docker Hub on Release

on:
  release:
    types: [published]

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ env.DOCKER_HUB_TOKEN }}
    
    - name: Extract release version
      id: version
      run: |
        # Remove 'v' prefix if present (e.g., v1.0.0 -> 1.0.0)
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    
    - name: Create SSL certificates from secrets
      run: |
        # Create nginx SSL directory
        mkdir -p ./nginx/ssl
        
        # Write certificates from GitHub secrets to files
        echo "${{ secrets.SSL_CERTIFICATE }}" > ./nginx/ssl/nginx-selfsigned.crt
        echo "${{ secrets.SSL_PRIVATE_KEY }}" > ./nginx/ssl/nginx-selfsigned.key
        
        # Set proper permissions
        chmod 644 ./nginx/ssl/nginx-selfsigned.crt
        chmod 600 ./nginx/ssl/nginx-selfsigned.key
        
    - name: Build with Docker Compose
      env:
        # Pass GitHub secrets as environment variables
        API_KEY: ${{ secrets.API_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        # Add other secrets as needed
      run: |
        # Build all services defined in docker-compose.yml
        docker-compose build
        
    - name: Tag images for Docker Hub
      run: |
        # Get the version from the previous step
        VERSION=${{ steps.version.outputs.version }}
        
        # List all images built by docker-compose
        IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "^<none>" | grep -E "^[^/]+_[^/]+")
        
        for IMAGE in $IMAGES; do
          # Extract service name from image (assuming format: projectname_servicename)
          SERVICE_NAME=$(echo $IMAGE | cut -d'_' -f2 | cut -d':' -f1)
          
          # Tag with version and latest
          docker tag $IMAGE $DOCKER_HUB_USERNAME/$SERVICE_NAME:$VERSION
          docker tag $IMAGE $DOCKER_HUB_USERNAME/$SERVICE_NAME:latest
          
          echo "Tagged $IMAGE as:"
          echo "  - $DOCKER_HUB_USERNAME/$SERVICE_NAME:$VERSION"
          echo "  - $DOCKER_HUB_USERNAME/$SERVICE_NAME:latest"
        done
    
    - name: Push images to Docker Hub
      run: |
        VERSION=${{ steps.version.outputs.version }}
        
        # Get list of tagged images
        TAGGED_IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "^$DOCKER_HUB_USERNAME/")
        
        for IMAGE in $TAGGED_IMAGES; do
          echo "Pushing $IMAGE..."
          docker push $IMAGE
        done
    
    - name: Clean up local images
      run: |
        # Clean up to save space
        docker system prune -f
        
    - name: Deployment Summary
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üì¶ Release version: ${{ steps.version.outputs.version }}"
        echo "üê≥ Images pushed to Docker Hub under username: $DOCKER_HUB_USERNAME"
        echo "üè∑Ô∏è  Tags: ${{ steps.version.outputs.version }}, latest"